// Generated by Dagger (https://google.github.io/dagger).
package com.planbcambodia.projectkickstart.di.component;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.arch.lifecycle.ViewModel;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.planbcambodia.projectkickstart.app.App;
import com.planbcambodia.projectkickstart.data.repository.Repository;
import com.planbcambodia.projectkickstart.di.module.ActivitiesBindingModule_MainActivity;
import com.planbcambodia.projectkickstart.di.module.NetworkModule;
import com.planbcambodia.projectkickstart.di.module.NetworkModule_ProvideRepository$app_debugFactory;
import com.planbcambodia.projectkickstart.di.module.NetworkModule_ProvideRetrofitInterface$app_debugFactory;
import com.planbcambodia.projectkickstart.di.viewmodelfactory.DaggerAwareViewModelFactory;
import com.planbcambodia.projectkickstart.view.ui.activity.MainActivity;
import com.planbcambodia.projectkickstart.view.ui.activity.MainActivity_MembersInjector;
import com.planbcambodia.projectkickstart.viewmodel.MainViewModel;
import com.planbcambodia.projectkickstart.viewmodel.MainViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivitiesBindingModule_MainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Retrofit> provideRetrofitInterface$app_debugProvider;

  private Provider<Repository> provideRepository$app_debugProvider;

  private DaggerAppComponent(NetworkModule networkModuleParam, Application create) {

    initialize(networkModuleParam, create);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(
        MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam, final Application create) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivitiesBindingModule_MainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivitiesBindingModule_MainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.provideRetrofitInterface$app_debugProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitInterface$app_debugFactory.create(networkModuleParam));
    this.provideRepository$app_debugProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRepository$app_debugFactory.create(
                networkModuleParam, provideRetrofitInterface$app_debugProvider));
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private NetworkModule networkModule;

    private Application create;

    @Override
    public Builder create(Application app) {
      this.create = Preconditions.checkNotNull(app);
      return this;
    }

    @Override
    public AppComponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      Preconditions.checkBuilderRequirement(create, Application.class);
      return new DaggerAppComponent(networkModule, create);
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivitiesBindingModule_MainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public ActivitiesBindingModule_MainActivity.MainActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, MainActivity.class);
      return new MainActivitySubcomponentImpl(seedInstance);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivitiesBindingModule_MainActivity.MainActivitySubcomponent {
    private Provider<MainViewModel> mainViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivity seedInstance) {

      initialize(seedInstance);
    }

    private DispatchingAndroidInjector<android.support.v4.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>>
        getMapOfClassOfAndProviderOfViewModel() {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(
          MainViewModel.class, (Provider) mainViewModelProvider);
    }

    private DaggerAwareViewModelFactory getDaggerAwareViewModelFactory() {
      return new DaggerAwareViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity seedInstance) {
      this.mainViewModelProvider =
          MainViewModel_Factory.create(DaggerAppComponent.this.provideRepository$app_debugProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectViewModelFactory(
          instance, getDaggerAwareViewModelFactory());
      return instance;
    }
  }
}
