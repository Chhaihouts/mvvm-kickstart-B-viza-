// Generated by Dagger (https://google.github.io/dagger).
package com.planbcambodia.projectkickstart.di.module;

import com.planbcambodia.projectkickstart.data.repository.Repository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class NetworkModule_ProvideRepository$app_debugFactory implements Factory<Repository> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvideRepository$app_debugFactory(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public Repository get() {
    return proxyProvideRepository$app_debug(module, retrofitProvider.get());
  }

  public static NetworkModule_ProvideRepository$app_debugFactory create(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvideRepository$app_debugFactory(module, retrofitProvider);
  }

  public static Repository proxyProvideRepository$app_debug(
      NetworkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideRepository$app_debug(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
